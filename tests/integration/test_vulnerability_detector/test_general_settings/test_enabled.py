'''
copyright: Copyright (C) 2015-2022, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: These tests will check if the `enabled` option of the Vulnerability Detector module
       is working correctly. This option is located in its corresponding section of
       the `ossec.conf` file and allows enabling or disabling this module.

components:
    - vulnerability_detector

suite: general_settings

targets:
    - manager

daemons:
    - wazuh-modulesd
    - wazuh-db
    - wazuh-analysisd

os_platform:
    - linux

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - Debian Buster
    - Red Hat 8
    - Ubuntu Focal
    - Ubuntu Bionic

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/vulnerability-detection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/vuln-detector.html#enabled

tags:
    - general_settings
    - settings
    - vulnerability
    - vulnerability_detector
'''
import os
import pytest

from wazuh_testing.constants.paths.logs import WAZUH_LOG_PATH
from wazuh_testing.utils.callbacks import generate_callback
from wazuh_testing.tools.file_monitor import FileMonitor
from wazuh_testing.utils.configuration import get_test_cases_data, load_configuration_template
from wazuh_testing.modules.vulnerability_detector import patterns as cb
from wazuh_testing.modules.vulnerability_detector import LOCAL_INTERNAL_OPTIONS as local_internal_options
from . import TEST_CASES_PATH, CONFIGURATIONS_PATH


pytestmark = [pytest.mark.server]

# Configuration and cases data
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_enabled.yaml')
t1_cases_path = os.path.join(TEST_CASES_PATH, 'cases_enabled.yaml')
t2_cases_path = os.path.join(TEST_CASES_PATH, 'cases_disabled.yaml')

# Enabled test configurations (t1)
t1_configuration_parameters, t1_configuration_metadata, t1_case_ids = get_test_cases_data(t1_cases_path)
t1_configurations = load_configuration_template(configurations_path, t1_configuration_parameters,
                                                t1_configuration_metadata)
# Disabled test configurations (t2)
t2_configuration_parameters, t2_configuration_metadata, t2_case_ids = get_test_cases_data(t2_cases_path)
t2_configurations = load_configuration_template(configurations_path, t2_configuration_parameters,
                                                t2_configuration_metadata)


@pytest.mark.tier(level=0)
@pytest.mark.parametrize('test_configuration, test_metadata', zip(t1_configurations, t1_configuration_metadata), ids=t1_case_ids)
def test_enabled(test_configuration, test_metadata, set_wazuh_configuration, truncate_monitored_files,
                 configure_local_internal_options, restart_modulesd):
    '''
    description: Check that vulnerability detector is started when is set enabled yes.

    test_phases:
        - Set a custom Wazuh configuration.
        - Restart wazuh-modulesd.
        - Check in the log that the vulnerability detector deactivated module does not appear.

    wazuh_min_version: 4.2.0

    tier: 0

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata.
        - set_wazuh_configuration:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - configure_local_internal_options:
            type: fixture
            brief: Set local_internal_options configuration.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - restart_modulesd:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - Verify that when the `enabled` option is set to `yes`, the Vulnerability Detector module is running.

    input_description:
        - The `test_enabled.yaml` file provides the module configuration for this test.

    expected_output:
        - r'NOT (.*)wazuh-modulesd:vulnerability-detector(.*) Module disabled. Exiting...'
    '''  
    file_monitor = FileMonitor(monitored_file=WAZUH_LOG_PATH)
    
    file_monitor.start(callback=generate_callback(regex=cb.VDT_MODULE_DISABLED))
    assert file_monitor.callback_result is None, f"Unexpected '{cb.VDT_MODULE_DISABLED}' event was found."



@pytest.mark.tier(level=0)
@pytest.mark.parametrize('test_configuration, test_metadata', zip(t2_configurations, t2_configuration_metadata), ids=t2_case_ids)
def test_disabled(test_configuration, test_metadata, set_wazuh_configuration, truncate_monitored_files,
                  configure_local_internal_options, restart_modulesd):
    '''
    description: Check that vulnerability detector is not started when is set enabled no.

    test_phases:
        - Set a custom Wazuh configuration.
        - Restart wazuh-modulesd.
        - Check in the log that the vulnerability detector deactivated module does not appear.

    wazuh_min_version: 4.2.0

    tier: 0

    parameters:
        - configuration:
            type: dict
            brief: Wazuh configuration data. Needed for set_wazuh_configuration fixture.
        - metadata:
            type: dict
            brief: Wazuh configuration metadata.
        - set_wazuh_configuration:
            type: fixture
            brief: Set the wazuh configuration according to the configuration data.
        - configure_local_internal_options:
            type: fixture
            brief: Set local_internal_options configuration.
        - truncate_monitored_files:
            type: fixture
            brief: Truncate all the log files and json alerts files before and after the test execution.
        - restart_modulesd:
            type: fixture
            brief: Restart the wazuh-modulesd daemon.

    assertions:
        - Verify that when the `enabled` option is set to `no`, the vulnerability detector module does not start.

    input_description:
        - The `test_disabled.yaml` file provides the module configuration for this test.

    expected_output:
        - r'(.*)wazuh-modulesd:vulnerability-detector(.*) Module disabled. Exiting...'
    '''
    file_monitor = FileMonitor(monitored_file=WAZUH_LOG_PATH)
    
    file_monitor.start(callback=generate_callback(regex=cb.VDT_MODULE_DISABLED))
    assert file_monitor.callback_result is not None, f"Unexpected '{cb.VDT_MODULE_DISABLED}' event was found."
