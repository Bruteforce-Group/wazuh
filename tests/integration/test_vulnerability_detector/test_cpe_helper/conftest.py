# Copyright (C) 2015-2023, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2
import os
import pytest

from wazuh_testing.utils.db_interface import agent_db
from wazuh_testing.utils.file import read_json_file, copy, write_json_file, read_file, write_file
from wazuh_testing.modules.vulnerability_detector import CUSTOM_CPE_HELPER_TEMPLATE, CPE_HELPER_PATH

TEST_FEEDS_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'feeds')
custom_cpe_helper_path = os.path.join(TEST_FEEDS_PATH, 'cpe_helper', CUSTOM_CPE_HELPER_TEMPLATE)

def replace_cpe_json_fields(tags=None, values=None):
    """Replace the tags and values of the generic_custom_cpe_helper.json file.

    Args:
        tags (dict): Dictionary with tags names values
        values (dict): Dictionary with tag values
    """
    filedata = read_file(CPE_HELPER_PATH)

    for key, value in tags.items():
        filedata = filedata.replace(key, value)

    for key, value in values.items():
        filedata = filedata.replace(key, value)

    write_file(CPE_HELPER_PATH, data=filedata)


def remove_item(item, remove_key=""):
    """Remove recursively the tags and values of the dictionary.

    Args:
        item (dict): Dictionary
        remove_key (str): Item to be deleted
    """
    if isinstance(item, dict):
        for key in list(item.keys()):
            if key == remove_key:
                del item[key]
            else:
                remove_item(item[key], remove_key)
    elif isinstance(item, list):
        for i in reversed(range(len(item))):
            if item[i] == remove_key:
                del item[i]
            else:
                remove_item(item[i], remove_key)
    else:
        pass
    return item


def remove_cpe_json_fields(tags=None):
    """Remove the tags and values of the generic_custom_cpe_helper.json file.

    Args:
        tags (list): Dictionary with tags names values
    """
    tags = [] if tags is None else tags

    if len(tags) > 0:
        filedata = read_json_file(CPE_HELPER_PATH)

        for item in tags:
            filedata = remove_item(filedata, item)

        write_json_file(CPE_HELPER_PATH, filedata)


@pytest.fixture()
def prepare_environment(request, test_metadata, agent_system, agent_packages, mock_agent_with_custom_system):
    """Prepare the environment with a mocked agent, vulnerable packages and a custom cpe_helper.

    - Mock an agent with a specified system.
    - Insert mocked vulnerables packages.
    - Update packages sync status.
    - Copy the custom CPE helper to the dictionaries folder.
    - Force full scan.

    Args:
        metadata (dict): Test case metadata.
        agent_system (str): System to set to the mocked agent.
        agent_packages (list): List of vulnerable packages
        mock_agent_with_custom_system (fixture): Mock an agent with a custom system.
    """
    for package in agent_packages:
        try:
            version = package['version']
        except KeyError:
            version = ''
        try:
            format = package['format']
        except KeyError:
            format = 'rpm'
        try:
            architecture = package['architecture']
        except KeyError:
            architecture = 'x64'
        agent_db.insert_package(name=package['name'], format=format, architecture=architecture,
                                agent_id=mock_agent_with_custom_system, vendor=package['vendor'],
                                version=version, source=package['name'])

    # Sync packages info
    agent_db.update_sync_info(agent_id=mock_agent_with_custom_system, component="syscollector-packages")
    agent_db.update_sync_info(agent_id=mock_agent_with_custom_system, component="syscollector-hotfixes")

    # Make a backup data from inital CPE helper
    cpe_helper_backup_data = read_json_file(CPE_HELPER_PATH)

    # Set the custom CPE helper
    copy(custom_cpe_helper_path, CPE_HELPER_PATH)

    # Remove the values of the CPE helper
    remove_cpe_json_fields(tags=test_metadata['missing_field'])

    # Replace the values of the CPE helper
    replace_cpe_json_fields(tags=test_metadata['tags'], values=test_metadata['values'])

    yield mock_agent_with_custom_system

    # Restore the CPE helper backup data
    write_json_file(CPE_HELPER_PATH, cpe_helper_backup_data)